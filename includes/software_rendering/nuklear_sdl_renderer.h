/**
 * @file nuklear_sdl_renderer.h
 * @brief Minimal SDL2-based Nuklear backend integration (function prototypes only).
 * @details
 * This header defines a minimal and portable backend implementation connecting the Nuklear GUI system
 * with an SDL2 environment (Window + Renderer).
 * 
 * The declared functions provide:
 * - Initialization of the Nuklear context with SDL2.
 * - Font atlas management for TTF or built-in fonts.
 * - SDL2 event translation into Nuklear input.
 * - Rendering of the GUI elements using SDL2's 2D renderer.
 * - Resource cleanup for backend-specific allocations.
 * 
 * @path includes/software_rendering/nuklear_sdl_renderer.h
 */

 #ifndef NUKLEAR_SDL_RENDERER_H
 #define NUKLEAR_SDL_RENDERER_H
 
 /* --- External includes --- */
 #include <SDL2/SDL.h>            /**< SDL2 main header for window, renderer, and event handling. */
 #include "../Nuklear/nuklear.h"  /**< Nuklear core definitions for UI management. */
 
 /*
  * The following function prototypes must match exactly the implementation in the associated
  * `.c` source file to ensure binary compatibility and avoid linkage errors.
  */
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /**
  * @brief Initialize the Nuklear GUI context for use with an SDL_Window and SDL_Renderer.
  * 
  * @param[in] win Pointer to the SDL_Window to attach the GUI system to.
  * @param[in] sdl_renderer Pointer to the SDL_Renderer used for rendering GUI elements.
  * 
  * @return Pointer to the initialized `nk_context` structure, which represents the state of the GUI.
  * 
  * @note This function must be called before using any other `nk_sdl_*` functions.
  * 
  * @example
  * @code
  * struct nk_context* ctx = nk_sdl_init(window, renderer);
  * @endcode
  */
 struct nk_context* nk_sdl_init(SDL_Window *win, SDL_Renderer *sdl_renderer);
 
 /**
  * @brief Translate an SDL2 event into Nuklear input events.
  * 
  * @param[in] evt Pointer to the SDL_Event to process (mouse, keyboard, window events, etc.).
  * 
  * @details
  * This function should be called for each SDL event polled from the event queue.
  * It allows the GUI to correctly react to user inputs.
  * 
  * @example
  * @code
  * SDL_Event evt;
  * while (SDL_PollEvent(&evt)) {
  *     nk_sdl_handle_event(&evt);
  * }
  * @endcode
  */
 void nk_sdl_handle_event(const SDL_Event *evt);
 
 /**
  * @brief Begin a font stash operation, allowing fonts to be loaded into Nuklear.
  * 
  * @param[out] atlas Pointer to a `nk_font_atlas*` where the font atlas reference will be stored.
  * 
  * @details
  * Font stashing allows the definition of custom fonts, either from embedded TTF files
  * or default built-in fonts. Always followed by a call to `nk_sdl_font_stash_end()`.
  * 
  * @example
  * @code
  * struct nk_font_atlas* atlas;
  * nk_sdl_font_stash_begin(&atlas);
  * // Load custom fonts here
  * nk_sdl_font_stash_end();
  * @endcode
  */
 void nk_sdl_font_stash_begin(struct nk_font_atlas **atlas);
 
 /**
  * @brief End the font stash block and finalize font usage in Nuklear.
  * 
  * @details
  * Completes the font loading procedure initiated by `nk_sdl_font_stash_begin()`.
  * Must be called before starting to render GUI elements.
  */
 void nk_sdl_font_stash_end(void);
 
 /**
  * @brief Render all GUI commands accumulated in the Nuklear context using SDL2's renderer.
  * 
  * @param[in] AA Anti-aliasing mode to use for rendering (`NK_ANTI_ALIASING_ON` or `NK_ANTI_ALIASING_OFF`).
  * 
  * @details
  * This function processes the drawing commands generated by Nuklear and submits
  * them to the SDL2 rendering backend using geometry primitives (rectangles, lines, etc.).
  * 
  * It must be called once per frame after GUI building has completed.
  * 
  * @example
  * @code
  * nk_sdl_render(NK_ANTI_ALIASING_ON);
  * @endcode
  */
 void nk_sdl_render(enum nk_anti_aliasing AA);
 
 /**
  * @brief Release and clean up all resources allocated by the Nuklear SDL renderer backend.
  * 
  * @details
  * This function should be called when shutting down the application or when the GUI is no longer needed,
  * to avoid memory leaks and dangling pointers.
  * 
  * @example
  * @code
  * nk_sdl_shutdown();
  * @endcode
  */
 void nk_sdl_shutdown(void);
 
 #ifdef __cplusplus
 }
 #endif
 
 #endif /* NUKLEAR_SDL_RENDERER_H */
 